service: cloudtrail

custom:
  logging_enabled: "${env:LOGGING_ENABLED, 'true'}"
  global_events: "${env:GLOBAL_EVENTS, 'true'}"
  multi_region: "${env:MULTI_REGION, 'true'}"


provider:
  name: aws
  stage: ${opt:stage, env:SLS_STAGE, 'dev'}
  profile: ${opt:aws-profile, env:AWS_PROFILE, env:AWS_DEFAULT_PROFILE, 'default'}
  stackTags:
    x-service: aws-health-event-publisher
    x-stack: ${self:service}-${self:provider.stage}


resources:

  Parameters:
    LoggingEnabled:
      Type: "String"
      Description: 'Whether logging is enabled'
      Default: "${self:custom.logging_enabled}"

    GlobalEvents:
      Type: "String"
      Description: "Whether the trail is publishing events from global services, such as IAM, to the log files."
      Default: "${self:custom.global_events}"

    MultiRegion:
      Type: "String"
      Description: "Whether the CloudTrail trail is created in the region in which you create the stack or in all regions."
      Default: "${self:custom.multi_region}"


  Resources:
    S3Bucket:
      Type: 'AWS::S3::Bucket'
      DependsOn: CloudWatchLogs

    S3BucketPolicy:
      Type: 'AWS::S3::BucketPolicy'
      Properties:
        Bucket:
          Ref: S3Bucket
        PolicyDocument:
          Statement:
            - Action: "s3:GetBucketAcl"
              Effect: "Allow"
              Resource:
                Fn::GetAtt:
                  - S3Bucket
                  - Arn
              Principal:
                Service: "cloudtrail.amazonaws.com"
            - Action: "s3:PutObject"
              Effect: "Allow"
              Resource:
                Fn::Join:
                  - '/'
                  - - Fn::GetAtt:
                        - S3Bucket
                        - Arn
                    - 'AWSLogs'
                    - '*'
              Principal:
                Service: "cloudtrail.amazonaws.com"
              Condition:
                StringEquals:
                  s3:x-amz-acl: "bucket-owner-full-control"

    SnsTopic:
      Type: 'AWS::SNS::Topic'
      DependsOn:
        - CloudWatchLogs
        - S3BucketPolicy
      Properties:
        DisplayName: 'CloudTrail Events'

    SnsTopicPolicy:
      Type: 'AWS::SNS::TopicPolicy'
      DependsOn:
        - CloudWatchLogs
        - S3BucketPolicy
      Properties:
        PolicyDocument:
          Statement:
            Effect: "Allow"
            Principal:
              Service: "cloudtrail.amazonaws.com"
            Action: "SNS:Publish"
            Resource:
              Ref: SnsTopic
        Topics:
          - Ref: SnsTopic

    CloudWatchLogs:
      Type: "AWS::Logs::LogGroup"
      Properties:
        RetentionInDays: 30

    CloudWatchLogsRole:
      Type: 'AWS::IAM::Role'
      Properties:
        AssumeRolePolicyDocument:
          Statement:
            - Effect: "Allow"
              Principal:
                Service: "cloudtrail.amazonaws.com"
              Action: "sts:AssumeRole"
        Policies:
          - PolicyName: "CloudWatchLogs"
            PolicyDocument:
              Statement:
                - Action:
                    - "logs:CreateLogStream"
                    - "logs:PutLogEvents"
                  Effect: "Allow"
                  Resource:
                    - Fn::GetAtt:
                      - CloudWatchLogs
                      - Arn

    CloudTrail:
      Type: 'AWS::CloudTrail::Trail'
      DependsOn: SnsTopicPolicy
      Properties:
        CloudWatchLogsLogGroupArn:
          Fn::GetAtt:
            - CloudWatchLogs
            - Arn
        CloudWatchLogsRoleArn:
          Fn::GetAtt:
            - CloudWatchLogsRole
            - Arn
        EnableLogFileValidation: true
        IncludeGlobalServiceEvents:
          Ref: GlobalEvents
        IsLogging:
          Ref: LoggingEnabled
        IsMultiRegionTrail:
          Ref: MultiRegion
        S3BucketName:
          Ref: S3Bucket
        SnsTopicName:
          Ref: SnsTopic
